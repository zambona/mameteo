<?php
//include("dataSelection.php");
//-----------------------------------------REQUETE DE TOUT---------------------------------------------
function getArchive()
{
    try 
      {
        $bdd = new PDO("mysql:host=localhost;dbname=wviewDB;charset=utf8",'user','pass');
      }
    catch(Exception $e)
      {
        die('Erreur : ' .$e->getMessage());
      }

    $data = $bdd->prepare('SELECT dateTime, pressure, inTemp, outTemp, windSpeed, windDir, rainRate, rain FROM archive');
    $data->execute();
    $data->closecursor;
  return $data;
  
}

//-----------------------------------------CONVERSION DE DATE DD/MM/YY EN TIMESTAMP#----------------------------------------------
function toTimestamp($dateDebut)
{
  if(isset($dateDebut)){
  //$dateDebut = $_GET['dateDebut'];
  //$date = preg_replace("/(\d+)\D+(\d+)\D+(\d+)\D+(\d+)\D+(\d+)\D+(\d+)/","$3-$2-$1-$4-$5-$6",$dateDebut);
  $date = preg_replace("/(\d+)\D+(\d+)\D+(\d+)/", "$3-$2-$1",$dateDebut);
  $date = strtotime($date);
  
}else{
   return $date = false;
 }

return $date;
}
//-----------------------------------------REQUETE DE PERIODE POUR TEMPERATURE----------------------------------------------



function getInterval($dateDebut, $dateFin)
{
  try 
      {
          $bdd = new PDO("mysql:host=localhost;dbname=wviewDB;charset=utf8",'user','pass');
      }
  catch(Exception $e)
      {
          die('Erreur : ' .$e->getMessage());
      }
      

  $sql = 'SELECT dateTime, outTemp FROM archive WHERE dateTime BETWEEN ? AND ?'; /*   requete preparéé qui attend un intervalle de temps
                                                                                  *   pour aller recupere les donnees
                                                                                  *
                                                                                  */
  $data = $bdd->prepare($sql);                                                    
  
  $data->bindParam(1, $dateDebut);
  
  $data->bindParam(2, $dateFin);
 
  $data->execute();

  while ($row = $data->fetch()) 
    {
      
        extract($row);
        
        $dateTime *= 1000;//conversion UNIX timestamp
        $outTemp = round(($outTemp - 32) / (9/5), 1);//conversion F° -> C° et arrondi a un chiffre

       $xOutTemp[] = ["$dateTime", "$outTemp"];
       
    }
$data->closecursor;
  return $xOutTemp;
}


function getInterval2($dateDebut, $dateFin)
{
  try 
      {
          $bdd = new PDO("mysql:host=localhost;dbname=wviewDB;charset=utf8", 'user','pass');
      }
  catch(Exception $e)
      {
          die('Erreur : ' .$e->getMessage());
      }
      

      if(($dateFin - $dateDebut) < 7200)
      {
        $sql =  'SELECT dateTime, outTemp, inTemp FROM archive WHERE dateTime BETWEEN ? AND ?';
      }

      if(($dateFin - $dateDebut) <= 86400 && ($dateFin - $dateDebut) > 7200)
      {
        $sql =  'SELECT dateTime, outTemp, inTemp FROM archive WHERE dateTime BETWEEN ? AND ? GROUP BY HOUR(FROM_UNIXTIME(dateTime))';
      }

      if(($dateFin) - ($dateDebut) > (86400))
      {
        $sql =  'SELECT dateTime, AVG(outTemp), AVG(inTemp) FROM archive WHERE dateTime BETWEEN ? AND ? GROUP BY DAY(FROM_UNIXTIME(dateTime))';


      }/*else{

        $sql = 'SELECT dateTime, AVG(outTemp), AVG(inTemp), DATE(FROM_UNIXTIME(dateTime)) AS myDate FROM archive WHERE dateTime BETWEEN ? AND ? Group BY myDate';
      }
    
      /*
      if((($dateFin/1000) - ($dateDebut/1000) > 290)  &&  (($dateFin/1000) - ($dateDebut/1000) < 2016) )
      {
        $sql =  'SELECT dateTime, AVG(outTemp) AS outTemp, AVG(inTemp) AS inTemp, FROM archive WHERE dateTime BETWEEN ? AND ? GROUP BY DAY(FROM_UNIXTIME(dateTime))';
      }
      if((($dateFin/1000) - ($dateDebut/1000) > 2016) || (($dateFin/1000) - ($dateDebut/1000) < 9072)  )
      {
        $sql =  'SELECT dateTime, AVG(outTemp) AS outTemp, AVG(inTemp) AS inTemp, FROM archive WHERE dateTime BETWEEN ? AND ? GROUP BY WEEK(FROM_UNIXTIME(dateTime))';
      }
      if((($dateFin/1000) - ($dateDebut/1000) > 2016) || (($dateFin/1000) - ($dateDebut/1000) < 54432)  )
      {
        $sql =  'SELECT dateTime, AVG(outTemp) AS outTemp, AVG(inTemp) AS inTemp, FROM archive WHERE dateTime BETWEEN ? AND ? GROUP BY MONTH(FROM_UNIXTIME(dateTime))';
      }
      
   /*   requete preparéé qui attend un intervalle de temps
                                                                                  *   pour aller recupere les donnees
                                                                                  *
                                                                                  */
  $data = $bdd->prepare($sql);                                                    
  
  $data->bindParam(1, $dateDebut);
  
  $data->bindParam(2, $dateFin);
 
  $data->execute();


  $i = 0;

foreach ($data as $row)
  {
    $row[0] *= 1000;//conversion UNIX timestamp
        $row[1] = round(($row[1] - 32) / (9/5), 1);//conversion F° -> C° et arrondi a un chiffre
        $row[2] = round(($row[2] - 32) / (9/5), 1);
    $xOutTemp2['ext'][] = [$row[0], $row[1]];
    $xOutTemp2['inte'][] = [$row[0], $row[2]];
    $i=$i+1;
  }
 
$data->closecursor;
  return $xOutTemp2;
}



function getIntervalPression($dateDebut, $dateFin)
{
  try 
      {
          $bdd = new PDO("mysql:host=localhost;dbname=wviewDB;charset=utf8",'user','pass');
      }
  catch(Exception $e)
      {
          die('Erreur : ' .$e->getMessage());
      }
      

  $sql = 'SELECT dateTime, barometer FROM archive WHERE dateTime BETWEEN ? AND ?'; /*   requete preparéé qui attend un intervalle de temps
                                                                                  *   pour aller recupere les donnees
                                                                                  *
                                                                                  */
  $data = $bdd->prepare($sql);                                                    
  
  $data->bindParam(1, $dateDebut);
  
  $data->bindParam(2, $dateFin);
 
  $data->execute();

  while ($row = $data->fetch()) 
    {
      
        extract($row);
        
        $dateTime *= 1000;//conversion UNIX timestamp
        $barometer *= 33.86;

       $xpress[] = ["$dateTime", "$barometer"];
       
    }
$data->closecursor;
  return $xpress;
}

function getIntervalPrecip($dateDebut, $dateFin)
{
  try 
      {
          $bdd = new PDO("mysql:host=localhost;dbname=wviewDB;charset=utf8",'user','pass');
      }
  catch(Exception $e)
      {
          die('Erreur : ' .$e->getMessage());
      }
      

  $sql = 'SELECT dateTime, AVG(rain) AS rainTot FROM archive WHERE dateTime BETWEEN ? AND ? GROUP BY DAY(FROM_UNIXTIME(dateTime))'; /*   requete preparéé qui attend un intervalle de temps
                                                                                  *   pour aller recupere les donnees
                                                                                  *
                                                                                  */
  $data = $bdd->prepare($sql);                                                    
  
  $data->bindParam(1, $dateDebut);
  
  $data->bindParam(2, $dateFin);
 
  $data->execute();

  while ($row = $data->fetch()) 
    {
      
        extract($row);
        
        $dateTime *= 1000;//conversion UNIX timestamp
        $rainTot *= 1000;

       $xprecip[] = ["$dateTime", "$rainTot"];
       
    }
$data->closecursor;
  return $xprecip;
}


function getIntervalVent($dateDebut, $dateFin)
{
  try 
      {
          $bdd = new PDO("mysql:host=localhost;dbname=wviewDB;charset=utf8",'user','pass');
      }
  catch(Exception $e)
      {
          die('Erreur : ' .$e->getMessage());
      }
      
   $sql = 'SELECT  dateTime, COALESCE(windDir, 0) AS windDir, COALESCE(windSpeed,0) AS windSpeed FROM archive WHERE dateTime BETWEEN ? AND ? GROUP BY windDir';
    
                                                                          
  $data = $bdd->prepare($sql);                                                    
  
  $data->bindParam(1, $dateDebut);
  
  $data->bindParam(2, $dateFin);
 
  $data->execute();

  $i = 0;

foreach($data as $row) 
    {
      
       
        $windSpeed *= 1.8502;
        
        $xVentRose['windDir'][] = $row[1];
        $xVentRose['windSpeed'][] = $row[2];
        
       
       $i=$i+1;
    }

  

    $limitB = 11.25;
    $limitH = 33.75;
    $j = 0;
    foreach ($xVentRose['windDir'] as &$value) {
         
        
        if($value < 11.25 || $value > 348.75){

              $value = 0;

            }
      
        for ($i=1; $i <= 16 ; $i++) {  
            if(($value <= ($i * ($limitB + $limitH)/2) - $limitB) || ($value >= ($i * ($limitB + $limitH)/2) + $limitB))
            {

              $value = $value;
              
            }else{
             
              $value = $i * ($limitB + $limitH)/2;
             
            }
            
        }
        
        $xVentRose2[] = [$value, $xVentRose['windSpeed'][$j]];
          $j++;
    }

      $data->closecursor;
  return $xVentRose2;
}

?>








